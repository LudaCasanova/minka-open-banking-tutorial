import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * Ledger instances are records that hold information about
 * existing instances of ledger running in a server. Each
 * instance has a unique handle that identifies it.
 *
 * A ledger instance record is responsible for defining
 * the configuration and other useful metadata about a ledger,
 * such as access control constraints, server signer, etc.
 */
export type Ledger = LedgerBaseData & {
    /**
     * Ledger instance handle or identifier, handle is used to
     * identify an instance.
     */
    handle: LedgerHandle;
    /**
     * Custom metadata, this object can hold any additional
     * data that could be useful to end users or ledger
     * plugins to work with ledger instances.
     */
    custom?: LedgerCustom;
    /**
     * Ledger server signer, used to define signer which is
     * used to sign transactions and operations owned by
     * the ledger, i.e effects.
     *
     * The end user can use the public key of this signer
     * to proof-of-authencity of transactions performed
     * by the ledger
     */
    signer?: LedgerHandle;
    /**
     * Determines access controls. This field can be used to
     * constraint API operations to specific signers, public keys,
     * etc.
     */
    access: LedgerAccess;
    /**
     * Ledger config object that contains common configuration options.
     */
    config?: LedgerConfig;
};
export declare enum LedgerConfigKey {
    IntentExpiryThresholdMinutes = "intent.expiryThresholdMinutes",
    IntentExpiryThresholdMinutesDeprecated = "intentExpiryThresholdMinutes",
    AnchorWalletRequired = "anchor.walletRequired"
}
/**
 * Ledger config object that contains common configuration options.
 */
export type LedgerConfig = {
    /**
     * Threshold for intent expiry in minutes. Intents that have not
     * finished processing in the specified amount of time will be
     * expired and as a consequence the entire corresponding thread
     * will be aborted.
     */
    [LedgerConfigKey.IntentExpiryThresholdMinutes]: number;
    /**
     * Defines whether a wallet must exist or
     * not as a constraint to create an anchor.
     * This flag is also checked when dropping
     * an anchor in order to forbid the deletion
     * if the anchor wallet is a real wallet
     * in the system.
     * Default value is 'true'.
     */
    [LedgerConfigKey.AnchorWalletRequired]?: boolean;
};
