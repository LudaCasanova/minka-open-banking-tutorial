import { LedgerAccess, LedgerAccessRule } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * Policies describes set of access rules that
 * can be reused when defining record access.
 */
export type LedgerPolicy = LedgerBaseData & {
    /**
     * A handle that uniquely identifies a policy.
     */
    handle: LedgerHandle;
    /**
     * The schema used to validate this policy. This is mandatory
     * if there is at least one schema defined for the record
     * type `policy`.
     */
    schema?: LedgerHandle;
    /**
     * Custom metadata that can be stored alongside a policy
     * definition.
     */
    custom?: LedgerCustom;
    /**
     * Access control rules to define who can control or manage
     * a policy.
     */
    access: LedgerAccess;
    /**
     * Record which this policy is applicable.
     */
    record: PolicyRecord;
    /**
     * Policy this one extends from.
     */
    extend?: LedgerHandle;
    /**
     * Set of access rules that will be attached
     * to the record that uses this policy
     */
    values?: PolicyValues;
};
export type PolicyValue = Omit<LedgerAccessRule, 'record'>;
export type PolicyValues = PolicyValue[];
export type PolicyRecord = LedgerAccessRule['record'];
