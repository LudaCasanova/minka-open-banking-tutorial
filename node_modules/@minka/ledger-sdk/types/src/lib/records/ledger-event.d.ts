import { LedgerRecord } from '../base/ledger-record';
import { RecordName } from '../common/dispatcher-config';
import { LedgerBaseData } from '../common/ledger-data';
import { IntentRecord, LimitClaimMetric } from './ledger-intent';
import { LedgerSymbol } from './ledger-symbol';
import { LedgerWallet } from './ledger-wallet';
/**
 * Name of the signal of the event.
 */
export declare enum EventSignal {
    BalanceReceived = "balance-received",
    WalletLimited = "wallet-limited",
    EffectCreated = "effect-created",
    LedgerCreated = "ledger-created",
    IntentCreated = "intent-created",
    SignerCreated = "signer-created",
    SymbolCreated = "symbol-created",
    PolicyCreated = "policy-created",
    SchemaCreated = "schema-created",
    WalletCreated = "wallet-created",
    BridgeCreated = "bridge-created",
    CircleCreated = "circle-created",
    RequestCreated = "request-created",
    AnchorCreated = "anchor-created",
    BridgeEntryCreated = "bridge-entry-created",
    EffectUpdated = "effect-updated",
    LedgerUpdated = "ledger-updated",
    IntentUpdated = "intent-updated",
    SignerUpdated = "signer-updated",
    SymbolUpdated = "symbol-updated",
    PolicyUpdated = "policy-updated",
    SchemaUpdated = "schema-updated",
    WalletUpdated = "wallet-updated",
    BridgeUpdated = "bridge-updated",
    CircleUpdated = "circle-updated",
    RequestUpdated = "request-updated",
    BridgeEntryUpdated = "bridge-entry-updated",
    AnchorUpdated = "anchor-updated",
    AnchorDropped = "anchor-dropped"
}
/**
 * All possible event signals.
 */
export declare const EventSignals: EventSignal[];
/**
 * Events describe a change in the ledger data and
 * are raised by the system after the change is
 * persisted in ledger database.
 *
 * Each event is identified by signal name.
 */
export type LedgerEvent<TData extends LedgerBaseData = LedgerBaseData> = BaseLedgerEvent<TData> | BalanceReceivedEvent | MetricLimitedEvent;
/**
 * The BaseLedgerEvent type is used to represent a base
 * event that is raised after a change in the ledger data.
 *
 * The BaseLedgerEvent type is a generic type that takes a
 * type parameter TData, which extends the LedgerBaseData type.
 */
export type BaseLedgerEvent<TData> = {
    /**
     * Unique identifier of the event
     */
    handle?: string;
    /**
     * Signal name
     */
    signal: EventSignal;
} & {
    [key in RecordName]?: LedgerRecord<TData>;
} & {
    parent?: LedgerRecord<TData>;
};
/**
 * Event raised when wallet receives a balance.
 */
export type BalanceReceivedEvent = {
    /**
     * Unique identifier of the event
     */
    handle?: string;
    /**
     * Signal name
     */
    signal: EventSignal.BalanceReceived;
    /**
     * Amount of balance received
     */
    amount: number;
    /**
     * Complete ledger record representing the
     * wallet which received the balance
     */
    wallet: LedgerRecord<LedgerWallet>;
    /**
     * Complete ledger record representing the
     * symbol of the received balance
     */
    symbol: LedgerRecord<LedgerSymbol>;
    /**
     * Complete ledger record representing the
     * intent which caused change of the balance
     */
    intent: IntentRecord;
};
/**
 * Event received when a wallet's metric is limited.
 */
export type MetricLimitedEvent = {
    /**
     * Unique identifier of the event
     */
    handle?: string;
    /**
     * Signal name
     */
    signal: EventSignal.WalletLimited;
    /**
     * Amount or quantity of the metric
     */
    amount: number;
    /**
     * Metric that is affected by the limit
     */
    metric: LimitClaimMetric;
    /**
     * Complete ledger record representing the
     * wallet which received the balance
     */
    wallet: LedgerRecord<LedgerWallet>;
    /**
     * Complete ledger record representing the
     * symbol of the received balance
     */
    symbol: LedgerRecord<LedgerSymbol>;
    /**
     * Complete ledger record representing the
     * intent which caused change of the balance
     */
    intent: IntentRecord;
};
