"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestAction = exports.RequestRecord = exports.RequestSchema = exports.RequestParticipant = void 0;
/**
 * RequestParticipant is the prefix for the RequestParticipantHandle field,
 * except for `unknown` which is used alone when the participant is not known.
 */
var RequestParticipant;
(function (RequestParticipant) {
    RequestParticipant["Unknown"] = "unknown";
    RequestParticipant["Ledger"] = "ledger";
    RequestParticipant["Signer"] = "signer";
    RequestParticipant["Bridge"] = "bridge";
    RequestParticipant["Effect"] = "effect";
})(RequestParticipant = exports.RequestParticipant || (exports.RequestParticipant = {}));
/**
 * RequestSchema represents the type of request that is logged.
 * At the moment we only support REST requests, but additional ones are
 * possible like Kafka.
 */
var RequestSchema;
(function (RequestSchema) {
    RequestSchema["Rest"] = "rest";
})(RequestSchema = exports.RequestSchema || (exports.RequestSchema = {}));
/**
 *  RequestRecord is the prefix for the LedgerRequest
 *  record field which has the format prefix:id. In case there is no
 *  specific id like in the case of querying records, just the prefix is used.
 */
var RequestRecord;
(function (RequestRecord) {
    RequestRecord["Ledger"] = "ledger";
    RequestRecord["Signer"] = "signer";
    RequestRecord["Symbol"] = "symbol";
    RequestRecord["Wallet"] = "wallet";
    RequestRecord["Intent"] = "intent";
    RequestRecord["IntentProof"] = "intent-proof";
    RequestRecord["Effect"] = "effect";
    RequestRecord["Bridge"] = "bridge";
    RequestRecord["Circle"] = "circle";
    RequestRecord["CircleSigner"] = "circle-signer";
    RequestRecord["Policy"] = "policy";
    RequestRecord["Schema"] = "schema";
    RequestRecord["Request"] = "request";
    RequestRecord["Anchor"] = "anchor";
    RequestRecord["Domain"] = "domain";
    RequestRecord["AdviceAliasResolve"] = "advice-alias-resolve";
    RequestRecord["LedgerChange"] = "ledger-change";
    RequestRecord["SignerChange"] = "signer-change";
    RequestRecord["SymbolChange"] = "symbol-change";
    RequestRecord["WalletChange"] = "wallet-change";
    RequestRecord["IntentChange"] = "intent-change";
    RequestRecord["EffectChange"] = "effect-change";
    RequestRecord["BridgeChange"] = "bridge-change";
    RequestRecord["CircleChange"] = "circle-change";
    RequestRecord["PolicyChange"] = "policy-change";
    RequestRecord["SchemaChange"] = "schema-change";
    RequestRecord["AnchorChange"] = "anchor-change";
    RequestRecord["Event"] = "event";
    RequestRecord["Entry"] = "entry";
})(RequestRecord = exports.RequestRecord || (exports.RequestRecord = {}));
/**
 * RequestAction represents what was done to/with the record.
 * For incoming REST requests Create corresponds to POST, Read to GET,
 * Update to PUT and Query to GET on the collection. Sign and ReadBalance
 * are actions that don't directly correspond to REST methods on the
 * record. The combination of RequestRecord and RequestAction
 * uniquely identify Ledger endpoints. Send is used when dispatching webhook
 * Events while Prepare, Commit and Abort are used for two-phase commit
 * requests.
 */
var RequestAction;
(function (RequestAction) {
    RequestAction["Create"] = "create";
    RequestAction["Read"] = "read";
    RequestAction["Update"] = "update";
    RequestAction["Query"] = "query";
    RequestAction["Lookup"] = "lookup";
    RequestAction["Drop"] = "drop";
    RequestAction["ReadBalance"] = "read-balance";
    RequestAction["ReadLimit"] = "read-limit";
    RequestAction["QuerySigner"] = "query-signer";
    RequestAction["AssignSigner"] = "assign-signer";
    RequestAction["ReadSigner"] = "read-signer";
    RequestAction["RemoveSigner"] = "remove-signer";
    RequestAction["Send"] = "send";
    RequestAction["Prepare"] = "prepare";
    RequestAction["Commit"] = "commit";
    RequestAction["Abort"] = "abort";
    RequestAction["Activate"] = "activate";
})(RequestAction = exports.RequestAction || (exports.RequestAction = {}));
//# sourceMappingURL=ledger-request.js.map