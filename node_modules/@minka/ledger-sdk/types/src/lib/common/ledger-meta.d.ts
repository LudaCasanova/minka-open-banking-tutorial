import { LedgerCustom } from './ledger-custom';
import { LedgerOwner } from './ledger-owner';
/**
 * Record metadata. This property is not hashed or signed.
 */
export type LedgerMeta<TCustom extends LedgerSignatureCustom = LedgerSignatureCustom> = {
    /**
     * Signatures attached to a ledger record that are used
     * to guarantee integrity and non-repudiation.
     *
     * TODO (herman): we probably don't want to constrain all proofs
     * to same type
     */
    proofs: LedgerSignature<TCustom>[];
    /**
     * Timestamp of mutation which created
     * or updated the record in DB.
     */
    moment?: string;
    /**
     * Record owners list
     */
    owners?: LedgerOwner;
};
/**
 * Signatures generated by signing a hash of the ledger
 * record data property with a private key.
 */
export type LedgerSignature<TCustom extends LedgerSignatureCustom = LedgerSignatureCustom> = {
    /**
     * Signature method, determines the algorithms used to
     * generate hashes and signatures.
     */
    method: 'ed25519-v2';
    /**
     * Public key that can be used to verify a signature,
     * type spki, format der, base64 encoded.
     */
    public: string;
    /**
     * Input digest that was signed. This is usually a hash
     * of the input data that may have been combined with
     * additional signature custom data hash.
     */
    digest: string;
    /**
     * Signature result, base64 encoded.
     */
    result: string;
    /**
     * Custom data attached to signatures which are used
     * to convey additional information that describe why
     * a signature was added to a record.
     */
    custom?: TCustom;
};
/**
 * Represents only ledger signature result without inclusion
 * of custom data. Used internally for low-level signing
 * operations.
 */
export type LedgerSignatureResult = Omit<LedgerSignature, 'custom'>;
export declare enum LedgerSignatureStatus {
    Created = "created",
    Updated = "updated",
    Dropped = "dropped",
    Stored = "stored"
}
/**
 * Base custom data for all ledger signatures.
 */
export type LedgerSignatureCustom = LedgerCustom & {
    /**
     * Timestamp when the signature was signed
     */
    moment: string;
};
