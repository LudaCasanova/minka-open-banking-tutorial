"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDate = exports.pluralize = exports.formatList = exports.toLedgerAmount = exports.fromLedgerAmount = exports.formatLedgerAmount = void 0;
const bignumber_js_1 = require("bignumber.js");
const moment_1 = __importDefault(require("moment"));
/**
 * Formats the integer amount which represents the multiple
 * of the smallest unit of account defined by symbol factor.
 * Output is the nominal amount formatted as currency with
 * fixed number of decimal places defined by factor.
 * @example
 * formatLedgerAmount(1234500, 1)
 * // returns a string value $1,234,500
 * formatLedgerAmount(12345, 1)
 * // returns a string value $12,345
 * formatLedgerAmount(1234500, 100)
 * // returns a string value $12,345.00
 * formatLedgerAmount(12345, 100)
 * // returns a string value $123.45
 *
 * @param ledgerAmount integer input amount
 * @param factor symbol factor
 * @returns formatted amount
 */
function formatLedgerAmount(ledgerAmount, factor) {
    const nominalAmount = fromLedgerAmount(ledgerAmount, factor);
    const numberOfDigits = Math.log10(factor);
    const numberFormatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        maximumFractionDigits: numberOfDigits,
        minimumFractionDigits: numberOfDigits,
    });
    return numberFormatter.format(nominalAmount);
}
exports.formatLedgerAmount = formatLedgerAmount;
/**
 * Converts ledger integer amount into nominal amount depending
 * on the symbol factor.
 *
 * @param ledgerAmount integer ledger amount
 * @param factor symbol factor
 * @returns nominal amount
 * @throws if input ledger amount is not an integer
 */
function fromLedgerAmount(ledgerAmount, factor) {
    if (ledgerAmount % 1 !== 0) {
        throw new Error('Input amount is not an integer');
    }
    return new bignumber_js_1.BigNumber(ledgerAmount).div(new bignumber_js_1.BigNumber(factor)).toNumber();
}
exports.fromLedgerAmount = fromLedgerAmount;
/**
 * Converts nominal amount into ledger integer amount depending
 * on the symbol factor.
 *
 * @param nominalAmount nominal amount
 * @param factor symbol factor
 * @returns integer ledger amount
 * @throws if input nominal amount doesn't produce an integer amount
 * with given factor
 */
function toLedgerAmount(nominalAmount, factor) {
    const ledgerAmount = new bignumber_js_1.BigNumber(nominalAmount).times(factor).toNumber();
    if (ledgerAmount % 1 !== 0) {
        throw new Error('Input nominal amount with given factor should produce integer ledger amount');
    }
    return ledgerAmount;
}
exports.toLedgerAmount = toLedgerAmount;
const listFormatter = new Intl.ListFormat('en-US', {
    style: 'long',
    type: 'conjunction',
});
/**
 * Formats a list of items so that they can be included
 * in a sentence.
 *
 * For example:
 * ```
 * ['a', 'b', 'c'] -> a, b, and c
 * ['a', 'b'] -> a and b
 * ['a'] -> a
 * ```
 *
 * @param items items list to format
 * @returns items list in a sentence form
 */
function formatList(items) {
    return listFormatter.format(items);
}
exports.formatList = formatList;
/**
 * Performs basic word pluralization by adding a provided
 * suffix to the word in case a plural form needs to be used.
 * This function is useful if you need to display a word after
 * a count or a list of items in a sentence.
 *
 * For example, if the provide noun is coin:
 * ```
 * count: 0  -> coins
 * count: 1  -> coin
 * count: 24 -> coins
 * ```
 *
 * @param count count to use for pluralization
 * @param noun noun to pluralize
 * @param suffix suffix to use for the plural form
 * @returns returns a pluralized word
 */
function pluralize(count, noun, suffix = 's') {
    return count === 1 ? noun : `${noun}${suffix}`;
}
exports.pluralize = pluralize;
/**
 * Formats a date into proper iso string format.
 *
 * @param date date to format
 * @returns date in iso string format
 */
function formatDate(date) {
    if (typeof date === 'undefined') {
        date = (0, moment_1.default)().toDate();
    }
    return date?.toISOString();
}
exports.formatDate = formatDate;
//# sourceMappingURL=format.js.map