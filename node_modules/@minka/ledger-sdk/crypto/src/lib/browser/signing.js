"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignature = exports.signHash = void 0;
const ed25519 = __importStar(require("@noble/ed25519"));
const asserts_1 = require("../asserts");
async function signHash(hash, keyPair) {
    (0, asserts_1.assertKeyFormat)(keyPair.format);
    // Cryptographic functions for ed25519 are not available in
    // browsers and that is why we use a JS implementation from
    // `@noble/ed25519`
    const privateKey = Buffer.from(keyPair.secret, 'base64');
    const signature = await ed25519.sign(hash, privateKey);
    return {
        method: 'ed25519-v2',
        public: keyPair.public,
        digest: hash,
        result: Buffer.from(signature).toString('base64'),
    };
}
exports.signHash = signHash;
async function verifySignature(hash, signature) {
    (0, asserts_1.assertSignatureMethod)(signature.method);
    // Cryptographic functions for ed25519 are not available in
    // browsers and that is why we use a JS implementation from
    // `@noble/ed25519`
    return ed25519.verify(Buffer.from(signature.result, 'base64'), hash, Buffer.from(signature.public, 'base64'));
}
exports.verifySignature = verifySignature;
//# sourceMappingURL=signing.js.map