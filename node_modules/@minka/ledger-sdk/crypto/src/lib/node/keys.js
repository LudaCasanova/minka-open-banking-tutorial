"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptSecretKey = exports.encryptSecretKey = exports.createKeyPair = void 0;
const crypto_1 = require("crypto");
const util_1 = require("util");
const asn1_1 = require("../common/asn1");
const format_1 = require("./format");
const generateKeyPairAsync = crypto_1.generateKeyPair && (0, util_1.promisify)(crypto_1.generateKeyPair);
function assertCryptoSupport() {
    if (!generateKeyPairAsync) {
        throw new Error('Unable to perform operation, `crypto.generateKeyPair` is not defined');
    }
    if (!crypto_1.createPrivateKey) {
        throw new Error('Unable to perform operation, `crypto.createPrivateKey` is not defined');
    }
}
async function createKeyPair() {
    assertCryptoSupport();
    const keyPair = await generateKeyPairAsync('ed25519');
    return {
        format: 'ed25519-raw',
        public: (0, format_1.exportPublicKey)(keyPair.publicKey),
        secret: (0, format_1.exportPrivateKey)(keyPair.privateKey),
    };
}
exports.createKeyPair = createKeyPair;
async function encryptSecretKey(secret, password) {
    assertCryptoSupport();
    const key = (0, format_1.importPrivateKey)(secret);
    return key
        .export({
        format: 'der',
        type: 'pkcs8',
        passphrase: password,
        cipher: 'aes-256-cbc',
    })
        .toString('base64');
}
exports.encryptSecretKey = encryptSecretKey;
async function decryptSecretKey(secret, password) {
    assertCryptoSupport();
    (0, asn1_1.assertPkcs5EncryptedKey)(Buffer.from(secret, 'base64').toString('hex'));
    try {
        const key = (0, crypto_1.createPrivateKey)({
            key: Buffer.from(secret, 'base64'),
            format: 'der',
            type: 'pkcs8',
            passphrase: password,
        });
        return (0, format_1.exportPrivateKey)(key);
    }
    catch (error) {
        // Catch specific openssl error which means that decryption
        // failed
        if (error?.code === 'ERR_OSSL_EVP_BAD_DECRYPT') {
            throw new Error('Unable to decrypt secret key');
        }
        throw error;
    }
}
exports.decryptSecretKey = decryptSecretKey;
//# sourceMappingURL=keys.js.map