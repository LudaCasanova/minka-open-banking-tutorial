import { LedgerHash, LedgerKeyPair, LedgerSignature, LedgerSignatureCustom } from "../../../types/src";
/**
 * Signs the provided hash using the provided private key.
 *
 * @param dataHash data hash to sign, hex encoded
 * @param keyPair key pair to use for signing,
 * @param customData custom data to append to the signature
 * @returns the generated signature
 */
export declare function signHash<TCustom extends LedgerSignatureCustom>(dataHash: LedgerHash, keyPair: LedgerKeyPair, customData?: TCustom): Promise<LedgerSignature<TCustom>>;
/**
 * Verifies the provided hash signature using the provided public key.
 *
 * @param dataHash data hash that was signed, hex encoded
 * @param signature signature to verify
 * @returns `true` if signature is valid, `false` otherwise
 */
export declare function verifySignature(dataHash: LedgerHash, signature: LedgerSignature): Promise<boolean>;
export declare function getSignatureKeyFormat(method: string): string;
