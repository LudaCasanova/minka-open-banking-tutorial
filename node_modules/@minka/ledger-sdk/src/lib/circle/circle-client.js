"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircleClient = exports.CirclesResponse = exports.CircleResponse = void 0;
const lodash_1 = __importDefault(require("lodash"));
const base_change_client_1 = require("../common/clients/base-change-client");
const base_client_1 = require("../common/clients/base-client");
const create_record_builder_1 = require("../common/services/create-record-builder");
const update_record_builder_1 = require("../common/services/update-record-builder");
const base_record_response_1 = require("../common/types/base-record-response");
const list_response_1 = require("../common/types/list-response");
const circle_signer_client_1 = require("./circle-signer-client");
const CIRCLES_PATH = '/circles';
/**
 * Single circle API response.
 */
class CircleResponse extends base_record_response_1.BaseRecordResponse {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    circle;
    constructor(response) {
        super(response);
        this.circle = response?.data?.data;
    }
}
exports.CircleResponse = CircleResponse;
/**
 * Circles list API response.
 */
class CirclesResponse extends list_response_1.BaseListResponse {
    circles;
    constructor(response) {
        super(response);
        this.circles = response?.data?.data?.map((record) => record.data);
    }
}
exports.CirclesResponse = CirclesResponse;
/**
 * Allows querying and managing circles.
 *
 * @see {LedgerCircle}
 */
class CircleClient extends base_client_1.BaseClient {
    /**
     * Allows querying and managing circle signers.
     *
     * @see {LedgerCircleSigner}
     */
    signer;
    /**
     * Allows querying changes.
     *
     */
    change;
    constructor(options) {
        super(options);
        this.signer = new circle_signer_client_1.CircleSignerClient(options, CIRCLES_PATH);
        this.change = new base_change_client_1.BaseChangeClient(options, CIRCLES_PATH);
        this.links = [this.signer, this.change];
    }
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerCircle}
     * @see {CreateRecordBuilder}
     * @param record initial record payload (optional)
     * @returns a builder instance
     */
    init(record) {
        const builder = new create_record_builder_1.CreateRecordBuilder(async (record, authParams) => {
            return this.createRecord(CIRCLES_PATH, CircleResponse, record, authParams);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
    /**
     * Initializes a builder instance for updating existing records.
     * The builder supports chaining to make it easier to work with
     * ledger records. You can pass the new record payload to this
     * method to use as initial content.
     *
     * @param record initial record payload
     * @returns a builder instance
     */
    edit(record) {
        const builder = new update_record_builder_1.UpdateRecordBuilder(async (record, authParams) => {
            return this.updateRecord(`${CIRCLES_PATH}/${encodeURIComponent(record.data.handle)}`, CircleResponse, record, authParams);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
    /**
     * Initializes a builder instance for updating existing records.
     * The builder supports chaining to make it easier to work with
     * ledger records. You need to pass the existing record payload
     * to this method to use as initial content.
     *
     * @see {LedgerCircle}
     * @see {UpdateRecordBuilder}
     * @param record initial record payload
     * @returns a builder instance
     */
    from(record) {
        const builder = new update_record_builder_1.UpdateRecordBuilder(async (record, authParams) => {
            return this.updateRecord(`${CIRCLES_PATH}/${encodeURIComponent(record.data.handle)}`, CircleResponse, record, authParams);
        });
        record = lodash_1.default.cloneDeep(record);
        (0, update_record_builder_1.linkToParent)(record);
        return builder.init(record);
    }
    /**
     * Gets a ledger circle by identifier (luid or handle).
     *
     * @see {LedgerCircle}
     * @throws {Error} if the circle doesn't exist or the
     *   current user doesn't have access to this circle
     * @param id a unique circle handle
     * @returns a single circle response with the requested circle
     */
    async read(id, authParams) {
        return this.getRecord(`${CIRCLES_PATH}/${encodeURIComponent(id)}`, CircleResponse, authParams);
    }
    /**
     * Queries circles from a ledger.
     *
     * @see {LedgerCircle}
     * @param params query parameters
     * @returns circles list response with all found circles
     */
    async list(params) {
        return this.getRecordsList(CIRCLES_PATH, CirclesResponse, params);
    }
}
exports.CircleClient = CircleClient;
//# sourceMappingURL=circle-client.js.map